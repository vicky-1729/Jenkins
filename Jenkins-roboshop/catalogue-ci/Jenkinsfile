pipeline {
    agent { label 'AGENT-1' } // Specifies which Jenkins agent to run this pipeline on

    parameters {
        booleanParam(
            name: 'DEPLOY_TO_CD', 
            defaultValue: false, 
            description: 'Check this box to trigger CD pipeline after successful CI'
        )
    }

    options {
        timeout(time: 30, unit: 'MINUTES') // Pipeline will time out after 30 min
        retry(1)                           // Retry the entire pipeline once if it fails
        disableConcurrentBuilds()          // Prevents parallel execution of the same pipeline
        timestamps()                       // Adds timestamps to console output
    }
    environment {
        appVersion = ''                    // Will store version from package.json
        ACC_ID = "741448928336"            // AWS Account ID
        REGION = "us-east-1"               // AWS Region
        PROJECT = "roboshop"               // Project name used in ECR path
        COMPONENT = "catalogue"            // Component name used in ECR path
    }
    stages {
        stage('Reading package.json ') {
            steps {
                script {
                    dir('Jenkins-roboshop/catalogue') { // Change to the correct directory containing package.json
                        echo "Building....!"
                        // Read package.json to get version - this will be used for Docker tag
                        def packageJson = readJSON file: 'package.json'
                        appVersion = packageJson.version
                        echo "Package version: ${appVersion}"
                        
                        // Install dependencies for the Node.js application
                        sh """
                            npm install
                        """
                    }
                }
            }
        }

        stage('Docker image Build') {
            steps {
                script {    
                        
                    dir('Jenkins-roboshop/catalogue') {
                        // Use AWS credentials for ECR access
                        withAWS(credentials: 'AWS-VICKY-CRED', region: 'us-east-1') {
                            sh """
                                echo "Building Docker Image...pushing to ECR "
                                # Login to Amazon ECR
                                aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ACC_ID}.dkr.ecr.${REGION}.amazonaws.com
                                
                                # Build the Docker image with version tag from package.json
                                docker build -t ${ACC_ID}.dkr.ecr.${REGION}.amazonaws.com/${PROJECT}/${COMPONENT}:${appVersion} .
                                
                                # Push the image to ECR repository
                                docker push ${ACC_ID}.dkr.ecr.${REGION}.amazonaws.com/${PROJECT}/${COMPONENT}:${appVersion}
                            """
                        }
                    }
                }
            }
        }

        // stage('Trigger CD Pipeline') {
        //     when {
        //         expression { params.DEPLOY_TO_CD == true }
        //     }
        //     steps {
        //         script {
        //             echo "Triggering CD pipeline for deployment..."
                    
        //             // Trigger the CD pipeline with the app version
        //             build job: 'catalogue-cd', 
        //                   parameters: [
        //                       string(name: 'APP_VERSION', value: "${appVersion}"),
        //                       string(name: 'ENVIRONMENT', value: 'dev')
        //                   ],
        //                   wait: false  // Don't wait for CD pipeline to complete
        //         }
        //     }
        // }
    }

    post {
        success {
            echo "Success..!"
            if (params.DEPLOY_TO_CD) {
                echo "CD pipeline has been triggered for deployment"
            } else {
                echo "CI completed successfully. CD pipeline not triggered (DEPLOY_TO_CD = false)"
            }

        }
        failure {
            echo "Failure...!"
           
        }
        always {
            echo "This is roboshop-project"
            
        }
    }
}
